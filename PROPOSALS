Proposals and ideas for the Termite programing language and its development environment


- Preprocessor
  Language itself is almost as minimalist as it can get, but it doesn't mean that we can't have external programs that could make development easier

  In particular, those functionalities could be put on shoulders of preprocessors:

    . Macros
      Self-contained code pieces could be injected into code directly by specific names
      which eliminates need to put "magic strings" by yourself

    . Labels
      Currently it's extremely dangerous and unhandy to write even simple complex flows
      as change of composition within bodies could quickly destroy everything, as previously inserted jumps do not act the same anymore


- Compiler
  It's more than possible to assemble termite code pieces into binary, without need to feed and interpret it by external program
  Easy architecture allows to make it quite easily


- Make portable interpreter
  Originally one of the goals was to make it as independent as possible, but it did harm
  relative to portability, interpreter could be compiled strictly against MinGW under Windows

  Good thing is, interpreter doesn't use anything OS specific outside of IO and minimalist CRT
  Under Linux IO functionalities might be achieved by syscalls without even need to link against anything


- Ditch . (drop) operator as its functionality might be achieved with @=~[ sequence
